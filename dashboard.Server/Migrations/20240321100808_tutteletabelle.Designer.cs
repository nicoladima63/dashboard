// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dashboard.Helper;

#nullable disable

namespace dashboard.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240321100808_tutteletabelle")]
    partial class Tutteletabelle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("dashboard.Server.Models.Compiti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aggiornatoda")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Aggiornatoil")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completato")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("InConsegna")
                        .HasColumnType("TEXT");

                    b.Property<string>("Inseritoda")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Inseritoil")
                        .HasColumnType("TEXT");

                    b.Property<int>("Lavorazione")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Paziente")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Compiti");
                });

            modelBuilder.Entity("dashboard.Server.Models.Fasi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Chilafa")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Compito")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Fatto")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Quando")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fasi");
                });

            modelBuilder.Entity("dashboard.Server.Models.FasiTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Chilafa")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Fatto")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Lavorazione")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Quando")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FasiTemplate");
                });

            modelBuilder.Entity("dashboard.Server.Models.Fornitori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Colore")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<string>("Telefono")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Fornitori");
                });

            modelBuilder.Entity("dashboard.Server.Models.Lavorazioni", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Descrizione")
                        .HasColumnType("TEXT");

                    b.Property<int>("FornitoreId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FornitoriId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<int>("Tempodilavorazione")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FornitoriId");

                    b.ToTable("Lavorazioni");
                });

            modelBuilder.Entity("dashboard.Server.Models.Materiali", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<double>("Prezzo")
                        .HasColumnType("REAL");

                    b.Property<string>("UnitaMisura")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Materiali");
                });

            modelBuilder.Entity("dashboard.Server.Models.MaterialiPerLavorazione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LavorazioneId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialeId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Quantita")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LavorazioneId");

                    b.HasIndex("MaterialeId");

                    b.ToTable("MaterialiPerLavorazione");
                });

            modelBuilder.Entity("dashboard.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("dashboard.Server.Models.Utenti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Utenti");
                });

            modelBuilder.Entity("dashboard.Server.Models.Lavorazioni", b =>
                {
                    b.HasOne("dashboard.Server.Models.Fornitori", null)
                        .WithMany("LavorazioniFornite")
                        .HasForeignKey("FornitoriId");
                });

            modelBuilder.Entity("dashboard.Server.Models.MaterialiPerLavorazione", b =>
                {
                    b.HasOne("dashboard.Server.Models.Lavorazioni", "Lavorazione")
                        .WithMany("MaterialiPerLavorazione")
                        .HasForeignKey("LavorazioneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dashboard.Server.Models.Materiali", "Materiale")
                        .WithMany("MaterialiPerLavorazione")
                        .HasForeignKey("MaterialeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lavorazione");

                    b.Navigation("Materiale");
                });

            modelBuilder.Entity("dashboard.Server.Models.Fornitori", b =>
                {
                    b.Navigation("LavorazioniFornite");
                });

            modelBuilder.Entity("dashboard.Server.Models.Lavorazioni", b =>
                {
                    b.Navigation("MaterialiPerLavorazione");
                });

            modelBuilder.Entity("dashboard.Server.Models.Materiali", b =>
                {
                    b.Navigation("MaterialiPerLavorazione");
                });
#pragma warning restore 612, 618
        }
    }
}
